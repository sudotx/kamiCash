// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum AccountStatusEnum {
  ACTIVE
  SUSPENDED
  BANNED
  DELETED
}

enum RoleEnum {
  ADMIN
  USER
}

enum TransactionType {
  INTERNAL
  EXTERNAL
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
}

enum AssetType {
  SOL
  USDC
}

model User {
  id                   String            @id @default(cuid())
  email                String            @unique
  password             String
  firstName            String
  lastName             String
  phoneNumber          String
  role                 RoleEnum          @default(USER)
  accountStatus        AccountStatusEnum @default(ACTIVE)
  emailVerified        Boolean           @default(false)
  solanaAddress        String?           @unique
  createdAt            DateTime          @default(now())
  updatedAt            DateTime          @updatedAt()
  lastLogin            DateTime?
  wallets              Wallet[]
  cards                Card[]
  sentTransactions     Transaction[]     @relation("SenderTransactions")
  receivedTransactions Transaction[]     @relation("ReceiverTransactions")
}

model Wallet {
  id        String    @id @default(cuid())
  userId    String
  assetType AssetType
  balance   Decimal
  user      User      @relation(fields: [userId], references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt()

  @@unique([userId, assetType])
}

model Card {
  id          String   @id @default(cuid())
  userId      String
  last4       String
  brand       String
  expiryMonth String
  expiryYear  String
  token       String? // For storing tokenized card info
  user        User     @relation(fields: [userId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt()
}

model Transaction {
  id         String            @id @default(cuid())
  fromUserId String
  toUserId   String?
  toAddress  String?
  amount     Decimal
  assetType  AssetType
  type       TransactionType
  status     TransactionStatus
  txHash     String? // For blockchain transactions
  fromUser   User              @relation("SenderTransactions", fields: [fromUserId], references: [id])
  toUser     User?             @relation("ReceiverTransactions", fields: [toUserId], references: [id])
  memo       String?
  createdAt  DateTime          @default(now())
  updatedAt  DateTime          @updatedAt()
}

model OTP {
  id        String   @id @default(cuid())
  email     String   @unique
  code      String
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
